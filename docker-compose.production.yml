version: '3.8'

services:
  # Frontend React Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: face-recognition-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_ENVIRONMENT=production
      - REACT_APP_DEBUG=false
    networks:
      - face-recognition-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: face-recognition-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - MONGO_URI=${MONGO_URI}
      - DATABASE_NAME=${DATABASE_NAME}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - LOG_LEVEL=INFO
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    networks:
      - face-recognition-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: face-recognition-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - face-recognition-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: face-recognition-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - face-recognition-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

  # MongoDB (if using local MongoDB instead of cloud)
  # mongodb:
  #   image: mongo:7
  #   container_name: face-recognition-mongodb
  #   restart: unless-stopped
  #   ports:
  #     - "27017:27017"
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
  #     - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
  #     - MONGO_INITDB_DATABASE=${DATABASE_NAME}
  #   volumes:
  #     - mongodb_data:/data/db
  #   networks:
  #     - face-recognition-network

volumes:
  redis_data:
  # mongodb_data:

networks:
  face-recognition-network:
    driver: bridge
